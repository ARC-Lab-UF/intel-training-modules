// Copyright (c) 2020 University of Florida
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Greg Stitt
// University of Florida
//
// This example demonstrates an AFU wrapper class built around the OPAE API 
// to do the following:
// 1) request an FPGA with a specific AFU
// 2) read and write from a memory-mapped register in the FPGA 

#include <cstdlib>
#include <iostream>

#include <opae/utils.h>

#include "AFU.h"

using namespace std;

// Auto-generated by OPAE's afu_json_mgr script
#include "afu_json_info.h"

//=========================================================
// Define the address of the memory-mapped register according the address
// that was used in the RTL code.
//
// NOTE: Ideally this could be generated with a .json file just like the
// AFU_ACCEL_UUID. Without auto-generation, you must manually ensure that
// the addresses match between the RTL code and software code.
//=========================================================
#define USER_REG_ADDR 0x0020

#define NUM_INTS 2048

int main(int argc, char *argv[]) {

  try {
    // Create an AFU object to provide basic services for the FPGA. The 
    // constructor searchers available FPGAs for one with an AFU with the
    // the specified ID
    AFU afu(AFU_ACCEL_UUID); 
    auto input2  = afu.malloc<volatile int>(100000);
    cout << "Allocating input..." << endl;
    auto input  = afu.malloc<volatile int>(NUM_INTS);
    cout << "Allocating output..." << endl;
    auto output  = afu.malloc<volatile int>(NUM_INTS);

    cout << "Initializing arrays..." << endl;
    for (unsigned i=0; i < NUM_INTS; i++) {
      input[i] = i % 2 ? 0xFFFF : 0;
      output[i] = 0;
    }

    const unsigned CL_BYTES = 64;
    unsigned num_cls = ceil((NUM_INTS*sizeof(volatile int)) / float(CL_BYTES));
    cout << "NUM CLs = " << num_cls << endl;

    afu.write(0x0052, (uint64_t) input);
    afu.write(0x0054, (uint64_t) output);
    afu.write(0x0056, num_cls);
    afu.write(0x0050, 1);  

    while (afu.read(0x0058) == 0);
    
    bool errors = false;
    for (unsigned i=0; i < NUM_INTS; i++) {
      cout << i << " " << output[i] << " " << input[i] << endl;

      if (output[i] != input[i]) {
	cerr << "ERROR: Output does not match input." << endl;	
	errors = true;
      }
    }
    
    if (!errors) {
      cout << "DMA Test Successful!!!" << endl;
      return EXIT_SUCCESS;   
    }
    else {
      cout << "DMA Test Failed!!!!" << endl;
      return EXIT_FAILURE;
    }      
  }
  // Exception handling for all the runtime errors that can occur within 
  // the AFU wrapper class.
  catch (const fpga_result& e) {    
    
    // Provide more meaningful error messages for each exception.
    if (e == FPGA_BUSY) {
      cerr << "ERROR: All FPGAs busy." << endl;
    }
    else if (e == FPGA_NOT_FOUND) { 
      cerr << "ERROR: FPGA with accelerator " << AFU_ACCEL_UUID 
	   << " not found." << endl;
    }
    else {
      // Print the default error string for the remaining fpga_result types.
      cerr << "ERROR: " << fpgaErrStr(e) << endl;    
    }
  }
  catch (const runtime_error& e) {    
    cerr << e.what() << endl;
  }
  catch (const opae::fpga::types::no_driver& e) {
    cerr << "ERROR: No FPGA driver found." << endl;
  }

  return EXIT_FAILURE;
}
